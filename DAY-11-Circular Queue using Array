#include <iostream>
using namespace std;
class Queue
{
	int rear, front;
	int size;
	int *arr;
public:
	Queue(int s)
	{
		front = rear = -1;
		size = s;
		arr = new int[s];
	}
	
	void enQueue (int value);
	int deQueue();
	void displayQueue();
};
void Queue::enQueue(int value)
{
	if ((front == 0 && rear == size-1) || (rear == (front-1)%(size-1)))
	{
		printf("\n Queue is Full");
		return;
	}
	else if (front == -1)
	{
		front = rear = 0;
		arr[rear] = value;
	}
	else
	{
		rear++;
		arr[rear] = value;
	}
}
int Queue::deQueue()
{
	if (front== -1)
	{
		printf("\n Queue is Empty");
		return INT_MIN;
	}
	int data = arr[front];
	arr[front] = -1;
	if(front == rear)
	{
		front = -1;
		rear = -1;
	}
	else if (front == size-1)
	front = 0;
	else
	front++;
	return data;
}
void Queue::displayQueue()
{
	if (front = -1)
	{
		printf("\n Queue is Empty");
		return;
	 } 
	 printf("\n Elements in Circular Queue are: ");
	 if(rear>=front)
	 {
	 	for(int i = front; i <= rear; i++)
	 	printf("%d", arr[i]);
	 }
	 else
	 {
	 	for(int i = front; i < size; i++)
	 	printf("%d", arr[i]);
	 	for(int i = 0; i<=rear; i++)
	 	printf("%d", arr[i]);
	 }
}
int main()
{
	Queue q(7);
	q.enQueue(12);
	q.enQueue(16);
	q.enQueue(21);
	q.enQueue(-8);
	q.enQueue(30);
	q.displayQueue();
	printf("\n Deleted value = %d", q.deQueue());
	printf("\n Deleted value = %d", q.deQueue());
	
	q.displayQueue();
	q.enQueue(10);
	q.enQueue(19);
	q.enQueue(23);
	q.displayQueue();
	q.enQueue(25);
	return 0;	
}
